{"version":3,"file":"static/css/main.f9cc1a7e.css","mappings":"AAAA,KAKE,kCAAmC,CACnC,iCAAkC,CAJlC,mIAEY,CAHZ,QAMF,CAEA,KACE,uEAEF,CCVA,KACI,SAFc,CAGjB,iBAgCO,UAAW,CAFnB,gBAKQ,WAAY,CAyCnB,WAIG,eAAkB,CA5BtB,qBA8CI,eAAmB,CAEnB,iBAAkB,CAGlB,YAFA,eAAgB,CAFhB,YAAa,CAGb,UACY,CA1ChB,yBAkDI,eAAgB","sources":["index.css","Detail.scss"],"sourcesContent":["body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n","//SASS 문법 1. 변수 사용\r\n$메인칼라: #ff0000;\r\n.red {\r\n    color: $메인칼라;\r\n}\r\n\r\n\r\n/**/\r\n\r\n\r\n/**/\r\n\r\n\r\n/**/\r\n\r\n//SASS 문법 2. @import\r\n//@import './어쩌구.css';\r\n//보통reset 같은걸 다른 css (혹은 scss)파일에 저장해두고 필요해질 때마다 @import 해오면 편리.\r\n\r\n/**/\r\n\r\n\r\n/**/\r\n\r\n\r\n/**/\r\n\r\n//SASS 문법 3. nesting 문법\r\n// div.container h4 {\r\n//     color : blue;\r\n// }\r\n// div.container p {\r\n//     color : green;\r\n// }이거말고\r\ndiv.container {\r\n    h4 {\r\n        color: blue;\r\n    }\r\n    p {\r\n        color: green;\r\n    }\r\n}\r\n\r\n//굳이 이렇게 쓰는 이유는\r\n//1. 셀렉터 해석이 쉽고\r\n//2. 관련된 class끼리 뭉텅이로 관리하기 편해서\r\n\r\n/**/\r\n\r\n\r\n/**/\r\n\r\n\r\n/**/\r\n\r\n//SASS 문법 4. extends 문법\r\n.my-alert {\r\n    background: #eeeeee;\r\n    padding: 15px;\r\n    border-radius: 5px;\r\n    max-width: 500px;\r\n    width: 100%;\r\n    margin: auto;\r\n}\r\n\r\n.my-alert p {\r\n    margin-bottom: 0;\r\n}\r\n\r\n//이거플러스 html 짜주면 알림창이 하나 생성\r\n//Q. 근데 갑자기 빨간색, 파란색 등 다양한 배경색의 알림창이 또 필요하다\r\n//구석기) .my-alert 라는 클래스를 복붙해서 .my-alert2라는 클래스를 하나 더 만들어 수정\r\n//배운사람) 손수복붙하지 않고 @extend 문법을 이용\r\n.my-alert {\r\n    background: #eeeeee;\r\n    padding: 15px;\r\n    border-radius: 5px;\r\n    max-width: 500px;\r\n    width: 100%;\r\n    margin: auto;\r\n}\r\n\r\n.my-alert2 {\r\n    @extend .my-alert;\r\n    background: yellow;\r\n}\r\n\r\n.my-alert p {\r\n    margin-bottom: 0;\r\n}\r\n\r\n\r\n/**/\r\n\r\n\r\n/**/\r\n\r\n\r\n/**/\r\n\r\n//SASS 문법 5. @mixin / @include 문법\r\n@mixin 함수() {\r\n    background: #eeeeee;\r\n    padding: 15px;\r\n    border-radius: 5px;\r\n    max-width: 500px;\r\n    width: 100%;\r\n    margin: auto;\r\n}\r\n\r\n.my-alert {\r\n    @include 함수()\r\n}\r\n\r\n.my-alert p {\r\n    margin-bottom: 0;\r\n}\r\n\r\n//mixin은 함수만드는 문법 (함수문법은 코드 축약하고 재사용할 때) \r\n//SASS에선 function 키워드 대신 @mixin\r\n//중괄호 안에 내가 축약하고 싶은 코드들을 다 담기\r\n//그리고 함수를 부를 땐 @include 함수명() 이렇게 \r\n//자바스크립트 문법과는 다르게 함수명이 위에 선언되어있어야 밑에서 사용가능\r\n//그리고 함수에 파라미터같은것도 넣을 수 있고 여러가지 기능들을 만듨있음\r\n//반복문도 있는데 구글링"],"names":[],"sourceRoot":""}